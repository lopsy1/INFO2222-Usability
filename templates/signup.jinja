<!-- 
Sign up page, pretty much the same as login.
-->
{% extends 'base.jinja' %}


{% block content %}
<main>
    <section class="text">
        <div class="login-form">
            <h2>Sign Up</h2>
            <label for="username">Username: </label><br>
            <input id="username" autofocus /><br><br>
            <label for="password">Password: </label><br>
            <input id="password" type="password" />
            <button onclick="signup()">Sign Up</button>
        </div>
        <p>
            <a href="/login">Log in instead</a>
        </p>
    </section>
</main>

<script src="/static/js/libs/bcrypt.min.js"></script>
<script src="/static/js/message-encryption.js"></script>
<script>
    var bcrypt = dcodeIO.bcrypt;

    $("#username").on("keyup", (e) => {
        if (e.key == "Enter") {
            $("#password").focus();
        }
    });

    $("#password").on("keyup", (e) => {
        if (e.key == "Enter") {
            signup();
        }
    });

    function isValidURL(string) {
        if (string.length == 0) {
            return false;
        }
        if (string[0] == "/") {
            return true;
        }
        return false;
    }

    // this function is identical to login(), see login.jinja
    async function signup() {
        let loginURL = "{{ url_for('signup_user') }}"


        let password = $("#password").val()
        let hasCapital = false;
        let hasSpecial = false;

        // resets elements after for next password check warnings
        // document.getElementById("capitalError").style.visibility="hidden";
        // document.getElementById("specialError").style.visibility="hidden";
        // for (let i = 0; i < password.length; i++)
        // {
        //     // https://stackoverflow.com/a/9862788 (regex check if string is in alphabet)
        //     if (!password[i].match(/[a-z]/i))
        //     {
        //         hasspecial = true;
        //     }
        //     
        //     if (password[i].match(/[a-z]/i))
        //     {
        //         if (password[i] == password[i].toUpperCase())
        //         {
        //             hascapital = true;
        //         }
        //     }
        // }

        let alphabet = "abcdefghijklmnopqrstuvwxyz"
        // Block any characters other than these, same as in username, except space is allowed. (see username validation function in app.py)
        let allowedSpecialChars = " 0123456789,.?!@#$%^&*()-_=+"
        for (let i = 0; i < password.length; i++) {
            if (alphabet.includes(password[i].toLowerCase())) {
                if (password[i] == password[i].toUpperCase()) {
                    hasCapital = true;
                }
            } else if (allowedSpecialChars.includes(password[i])) {
                hasSpecial = true;
            }
        }
        if (password.length < 6) {
            alert("Password must be at least 6 characters long.");
            return;
        }
        if (!hasCapital) {
            alert("Password must contain a capital letter.");
            return;
        }
        else if (!hasSpecial) {
            alert("Password must contain a non-alphabetic character.");
            return;
        }

        const passwordSalt = bcrypt.genSaltSync();
        const passwordHash = bcrypt.hashSync($("#password").val(), passwordSalt)

        console.log("out salt:", "<" + passwordSalt + ">", typeof passwordSalt);

        // Generate public and private key from password
        const messageKey = await aesKeyFromPassword(password, passwordSalt);
        const keyJSON = await keyToJSON(messageKey);
        sessionStorage.setItem("storageKey", JSON.stringify(keyJSON));


        let res = await axios.post(loginURL, {
            username: $("#username").val(),
            password: passwordHash,
            passwordSalt: passwordSalt
        });
        if (!isValidURL(res.data)) {
            alert(res.data);
            return;
        }
        console.log("Computed hash: " + passwordHash);
        window.open(res.data, "_self")
    }
</script>
{% endblock %}