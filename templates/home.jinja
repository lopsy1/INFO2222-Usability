<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %}
<main class="messaging-app">
    <h1>Messaging App </h1>
    <!-- The messages are displayed here -->
    <section id="message_box">
        <section id="message_box_history">
        </section>
        <hr>
        <section id="message_box_current">
        </section>
    </section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p style="display: inline;" class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room_from_box()">Chat</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none">
        <p style="display:inline" class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>
</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script src="/static/js/libs/bcrypt.min.js"></script>
<script src="/static/js/message-encryption.js"></script>
<script>
    username = "{{ username }}";
    var room_id = {{ room_id }};
    let partner = "{{ partner }}"
    Cookies.set('username', username);

    // The key used to access encrypted roomKeys from the server
    var storageKey = sessionStorage.getItem("storageKey");
    var roomKey = sessionStorage.getItem("roomKey");
    var exchangeKey = null;
    var partnerKey = null;

    // Flags used to keep track of where in the key exchange we are up to
    var roomKeySet = false;
    var gotKey = false;
    var sentKey = false;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
    $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room_from_box();
        }
    })


    $(document).ready(() => {
        // if we have set a partner already
        if (partner.length >= 3) {
            join_room(partner);
        }


        // Don't need this, as we leave rooms on each disconnection
        // if (room_id == -1) {
        //     console.log("Room not set");
        //     return;
        // }

        // Don't need this as room comes from server now
        //if (Cookies.get("room_id") == undefined) {
        //    console.log("Room cookie not set");
        //    return;
        //}
        //room_id = parseInt(Cookies.get("room_id"));

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        // $("#chat_box").hide();
        // $("#input_box").show();
    })

    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P

    // initializes the socket
    const socket = io();

    // When we get an unencrypted incoming message
    socket.on("incoming", (msg, color = "black") => {
        add_message(msg, color);
    })

    // when we receive an encrypted message
    socket.on("incomingEncrypted", (isHistory, userText, messageData, color = "black") => {
        console.log("Decrypting received message");
        console.log("IV:", messageData.iv, typeof messageData.iv);
        console.log("data:", messageData.message, typeof messageData.message);
        decryptText(messageData.message, roomKey, messageData.iv).then(msg => {
            if (isHistory) {
                add_history(userText + msg, color);
            } else {
                add_message(userText + msg, color);
            }
        }).catch(error => {
            console.error("Error: decrypting message:", error);
        });
    })

    // send the message to the server by emitting a "send" event
    function send() {
        let message = $("#message").val();
        let iv = crypto.getRandomValues(new Uint8Array(12));
        console.log("Encrypting message");
        encryptText(message, roomKey, iv).then(encryptedMessage => {
            console.log("Encrypted data:", encryptedMessage);
            socket.emit("send", {
                message: encryptedMessage,
                iv: iv,
            });
            console.log("Sent message");
        }).catch(error => {
            console.error("Error: encrypting message:", error);
        });
    }

    function join_room_from_box() {
        join_room($("#receiver").val());
    }

    // we emit a join room event to the server to join a room
    function join_room(receiver) {
        console.log("Trying to join room");
        // Get storageKey from sessionStorage
        keyFromJSON(JSON.parse(sessionStorage.getItem("storageKey")), ['encrypt', 'decrypt']).then(key => {
            storageKey = key;
            // Clear the message box
            $("#message_box_history").empty();
            $("#message_box_current").empty();
            // Ask the server to join the person
            socket.emit("join", receiver, (response) => {
                console.log("Response from server: ", response);
                // If we fail to join
                if (response.success == 0) {
                    room_id = -1;
                    alert(response.error);
                } else {
                    room_id = response.room;
                    console.log("Successfully joined room", room_id);
                    $("#chat_box").hide();

                    // If the response from the server contains an encrypted roomKey
                    if (response.hasKey == 1) {
                        console.log("Decrypting roomKey from server");
                        decryptText(response.key.encryptedKey, storageKey, response.key.iv).then(keyText => {
                            console.log("decrypted key:", keyText, typeof keyText);
                            keyFromJSON(JSON.parse(keyText), ['encrypt', 'decrypt']).then(key => {
                                roomKey = key;
                                roomKeySet = true;
                                console.log("Successfully set room key");
                                $("#input_box").show();
                                console.log("Asking for message history");
                                socket.emit("history", partner);
                            });
                        });
                    }
                    // If connecting for the first time, exchange public keys and generate a new roomKey
                    else {
                        console.log("Generating new roomKey");
                        window.crypto.subtle.generateKey(
                            {
                                name: "ECDH",
                                namedCurve: "P-384",
                            },
                            true,
                            ['deriveBits', 'deriveKey'],
                        ).then(result => {
                            exchangeKey = result;
                            keyToJSON(exchangeKey.publicKey).then(exportedKey => {
                                console.log("Sent key:", JSON.stringify(exportedKey));
                                socket.emit("publicKey", exportedKey);
                                sentKey = true;
                                trySecret();
                            }).catch(error => {
                                console.error("Error: sending key:", error);
                            });
                        });
                    }
                }
            });
        }).catch(error => {
            console.error("Error, could not find key in sessionStorage:", error);
            alert("Couldn't find stores key from login");
        });
    }


    socket.on("publicKey", (key) => {
        gotKey = true;
        console.log("Got key:", JSON.stringify(key));
        crypto.subtle.importKey(
            'jwk',
            key,
            {
                name: 'ECDH',
                namedCurve: "P-384",
            },
            true,
            [],
        ).then(result => {
            partnerKey = result;
            console.log("Successfully imported key");
            trySecret();
        }).catch(error => {
            console.error("Error: getting public key:", error);
        });
    });

    // When asked to, we send our public key, if the partner hadn't joined the room yet
    socket.on("publicKeyRequest", () => {
        if (exchangeKey != null) {
            keyToJSON(exchangeKey.publicKey).then(exportedKey => {
                console.log("Responded to key request:", JSON.stringify(exportedKey));
                socket.emit("publicKey", exportedKey);
                sentKey = true;
            }).catch(error => {
                console.error("Error: sending key:", error);
            });
        } else {
            console.log("Couldn't respond to key request");
        }
    });

    // Try and generate the shared secret with the other person
    async function trySecret() {
        if (roomKeySet == false) {
            if (sentKey) {
                if (gotKey) {
                    console.log("Beginning secret generation");
                    console.log("Key object types:", typeof exchangeKey.privateKey, typeof partnerKey);
                    roomKey = await deriveSecretKey(exchangeKey.privateKey, partnerKey);
                    let jsonRoomKey = await keyToJSON(roomKey)
                    let iv = crypto.getRandomValues(new Uint8Array(12));
                    let encryptedKey = await encryptText(JSON.stringify(jsonRoomKey), storageKey, iv);
                    socket.emit("roomKey", {
                        encryptedKey: encryptedKey,
                        iv: iv,
                    });
                    roomKeySet = true;
                    $("#input_box").show();
                    console.log("Finished secret generation");
                } else {
                    add_message("Waiting for partner to join.", color = "blue");
                    console.log("No Exchange: Key not received yet")
                }
            } else {
                console.log("No Exchange: Key not sent yet");
            }
        } else {
            console.log("No Exchange: Already have roomKey");
        }
    }


    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        room_id = -1;
        gotKey = false;
        sentKey = false;
        $("#input_box").hide();
        $("#chat_box").show();
        socket.emit("leave");
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box_current");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    function add_history(message, color) {
        let box = $("#message_box_history");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

</script>
{% endblock %}